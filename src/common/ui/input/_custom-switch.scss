
// switches
//

$custom-switch-size:    1.7rem;
$custom-switch-size-sm: 1.1rem;
$custom-switch-size-lg: 2.3rem;

@mixin custom-control-switch-sizing ($size, $input-height, $spinner-offset) {
  $height: $size;
  $width: $size * 1.75;
  $top: max(0, $font-size-base * $line-height-base - $height) * 0.5;

  padding: calc((#{$input-height} - #{$size}) * 0.5) 0;
  padding-left: $custom-control-gutter + $width;

  .custom-control-input {
    width: $width;
  }

  .custom-control-label {
    height: $height;
    line-height: $height;

    &::before {
      top: $top;
      left: -($width + $custom-control-gutter);
      height: $height;
      width: $width;
      border-radius: $size * 0.5;
    }

    &::after {
         top: add($top, $input-border-width * 2);
        left: add(-($width + $custom-control-gutter), $input-border-width * 2);
       width: subtract($size, $input-border-width * 4);
      height: subtract($size, $input-border-width * 4);
      border-radius: $size * 0.5;
    }
  }

  .custom-control-input:checked ~ .custom-control-label::after {
    transform: translateX($width - $size);
  }

  &.custom-control-indeterminate {
    .custom-control-input ~ .custom-control-label::after {
      transform: translateX(($width - $size) * 0.5);
    }
  }

  .custom-control-indeterminate-spinner {
    $spinner-size: $size * 0.65;
    font-size: $spinner-size;

    top: add(($size - $spinner-size) * 0.5, $spinner-offset);
    left: add(-($width + $custom-control-gutter), ($width - ($spinner-size)) * 0.5);
    z-index: 1;
  }

}


.custom-switch {

  .custom-control-indeterminate-spinner {
    // display: none;
    opacity: 0;
    position: absolute;
    width: 1em;
    height: 1em;
    color: $custom-control-indicator-checked-color;

    * {
      position: absolute;
      left: .4629em;
      bottom: 0;
      width: .074em;
      height: .2777em;
      border-radius: .5em;
      background-color: currentColor;
      transform-origin: center -.2222em;
      animation: indeterminate-spinner-blades 1s infinite linear;

      $animation-delay: 0s;
      $blade-rotation: 0deg;

      @for $i from 1 through 12 {
        &:nth-child(#{$i}) {
          animation-delay: $animation-delay;
          transform: rotate($blade-rotation);
          $blade-rotation: $blade-rotation + 30;
          $animation-delay: $animation-delay + .083;
        }
      }
    }
  }

  &.custom-control-indeterminate {
    .custom-control-indeterminate-spinner {
      display: block;
      opacity: 1;
      @include transition(opacity .5s ease-in-out);
    }
  }

  .custom-control-label {
    display: block;

    &::before {
      pointer-events: all;
    }

    &::after {
      background-color: $custom-control-indicator-border-color;
      @include transition(transform .15s ease-in-out, $custom-forms-transition);
    }
  }

  .custom-control-input:checked {
    ~ .custom-control-label::after {
      background-color: $custom-control-indicator-bg;
    }
    ~ .custom-control-label .custom-control-indeterminate-spinner {
      color: $custom-control-indicator-checked-bg;
    }
  }

  .custom-control-input:disabled {
    &:checked ~ .custom-control-label::before {
      @include gradient-bg(rgba(theme-color("primary"), .4));
    }
  }


  @include custom-control-switch-sizing($custom-switch-size, $input-height, 0);

  &.custom-control-sm {
    @include custom-control-switch-sizing($custom-switch-size-sm, $input-height-sm, 3px);
  }

  &.custom-control-lg {
    @include custom-control-switch-sizing($custom-switch-size-lg, $input-height-lg, 1px);
  }
}

@each $color-name, $color-value in $theme-colors {
  .custom-control-#{$color-name} {
    .custom-control-input:disabled {
      &:checked ~ .custom-control-label::before {
        @include gradient-bg(rgba($color-value, .4));
      }
    }

    .custom-control-input:checked {
      ~ .custom-control-label .custom-control-indeterminate-spinner {
        color: $color-value;
      }
    }
  }
}


@keyframes indeterminate-spinner-blades {
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
}
