
$tab-height: 1.5em;

@mixin tab-variant($background, $border, $text: color-contrast($background), $hover-background: darken($background, 7.5%), $hover-border: darken($border, 10%), $active-background: darken($background, 10%), $active-border: darken($border, 12.5%)) {
  color: $text;
  @include gradient-bg($background);
  border-color: $border;
  @include box-shadow($btn-box-shadow);

  &:not(.inactive) {
    &:hover {
      color: color-contrast($hover-background);
      @include gradient-bg($hover-background);
      border-color: $hover-border;
    }

    &:focus,
    &.focus {
      color: color-contrast($hover-background);
      @include gradient-bg($hover-background);
      border-color: $hover-border;
      @if $enable-shadows {
        @include box-shadow($btn-box-shadow, 0 0 0 $btn-focus-width rgba(mix(color-contrast($background), $border, 15%), .5));
      } @else {
        // Avoid using mixin so we can pass custom focus shadow properly
        box-shadow: 0 0 0 $btn-focus-width rgba(mix(color-contrast($background), $border, 15%), .5);
      }
    }
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    color: color-contrast($background);
    background-color: $background;
    border-color: $border;
    // Remove CSS gradients if they're enabled
    @if $enable-gradients {
      background-image: none;
    }
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    color: color-contrast($active-background);
    background-color: $active-background;
    @if $enable-gradients {
      background-image: none; // Remove the gradient for the pressed/active state
    }
    border-color: $active-border;

    &:focus {
      @if $enable-shadows and $btn-active-box-shadow != none {
        @include box-shadow($btn-active-box-shadow, 0 0 0 $btn-focus-width rgba(mix(color-contrast($background), $border, 15%), .5));
      } @else {
        // Avoid using mixin so we can pass custom focus shadow properly
        box-shadow: 0 0 0 $btn-focus-width rgba(mix(color-contrast($background), $border, 15%), .5);
      }
    }
  }
}

.container {

  &.contain {
    position: relative;
  }

  .inner {
    min-height: 100%;
    min-width: 100%;
  }
}

// .children {

// }

.drawers {
  position: absolute;
  display: flex;
  z-index: $zindex-drawer;

  .container-left & {
    top: 0;
    bottom: 0;
    left: 0;
    flex-direction: row;
  }

  .container-right & {
    top: 0;
    bottom: 0;
    right: 0;
    flex-direction: row-reverse;
  }

  .container-top & {
    top: 0;
    left: 0;
    right: 0;
    flex-direction: column;
  }

  .container-bottom & {
    bottom: 0;
    left: 0;
    right: 0;
    flex-direction: column-reverse;
  }
}

.drawer {
  position: relative;
  flex-grow: 0;
  flex-shrink: 0;
  flex-basis: 0%;
  // width: 0;
  overflow: hidden;
  transition: flex-basis 0.2s ease-in;
  transition-property: flex-basis, width, border-right-width, border-left-width, border-top-width, border-bottom-width, border-color;
  border: 0 solid transparent;
  background-color: white;

  &.active {
    flex-basis: 100%;
    box-shadow: 1px 0 2px rgba(black, 0.2);

    .container-left & {
      border-right-width: 1px;
    }

    .container-right & {
      border-left-width: 1px;
    }

    .container-top & {
      border-bottom-width: 1px;
    }

    .container-bottom & {
      border-top-width: 1px;
    }
  }

  @each $color, $value in $theme-colors {
    &.drawer-#{$color} {
      border-color: $value;
    }
  }
}


.drawer-content {
  position: absolute;
  top: 0;
  right: 0;
  height: 100%;

  .container-left & {
    right: 0;
  }

  .container-right & {
    left: 0;
  }
}



.tabs {
  position: absolute;
  flex: 0 0 auto;
  display: flex;
  pointer-events: none;

  .container-left & {
    height: 100%;
    flex-direction: column;
    left: 100%;
    top: 0;
  }

  .container-right & {
    height: 100%;
    flex-direction: column;
    right: 100%;
    top: 0;
  }

  .container-top & {
    width: 100%;
    flex-direction: row;
    top: 100%;
    left: 0;
  }

  .container-bottom & {
    width: 100%;
    flex-direction: row;
    bottom: 100%;
    left: 0;
  }
}

.tab {
  pointer-events: auto;
  cursor: pointer;

  color: $body-color;
  text-align: center;
  text-decoration: if($link-decoration == none, null, none);
  white-space: $btn-white-space;
  vertical-align: middle;
  user-select: none;
  background-color: transparent;
  border: $btn-border-width solid transparent;
  @include box-shadow($btn-box-shadow);

  display: flex;
  align-items: center;

  &.gutterless {
    padding: 0;
  }

  @each $color, $value in $theme-colors {
    &.tab-#{$color} {
      @include tab-variant($value, $value);
    }
  }

  .container-left &,
  .container-right & {
    padding: $btn-padding-x $btn-padding-y ;
    margin: 0.25em 0;
  }

  .container-top &,
  .container-bottom & {
    padding: $btn-padding-y $btn-padding-x ;
    margin: 0 0.25em;
  }

  .container-left & {
    border-top-right-radius: $btn-border-radius;
    border-bottom-right-radius: $btn-border-radius;
    box-shadow: 1px 1px 3px rgba(black, 0.4);
  }

  .container-right & {
    border-top-left-radius: $btn-border-radius;
    border-bottom-left-radius: $btn-border-radius;
    box-shadow: -1px 1px 3px rgba(black, 0.4);
  }

  .container-top & {
    border-bottom-left-radius: $btn-border-radius;
    border-bottom-right-radius: $btn-border-radius;
    box-shadow: 1px 1px 3px rgba(black, 0.4);
  }

  .container-bottom & {
    border-top-left-radius: $btn-border-radius;
    border-top-right-radius: $btn-border-radius;
    box-shadow: 1px 0px 3px rgba(black, 0.4);
  }
}

.tab-caption {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 0;
  font-size: 1.2rem;
  font-weight: 600;

  > span {
    white-space: nowrap;

    display: flex;
    justify-content: center;
    align-items: center;
  }

  .container-left &,
  .container-right & {
    width: $tab-height;

    > span {
      position: absolute;
      width: $tab-height;
      height: $tab-height;
      transform: rotate(90deg);

    }
  }

  .container-top &,
  .container-bottom & {
    height: $tab-height;
  }
}

.container-start   .tabs { justify-content: flex-start;}
.container-center  .tabs { justify-content: center;}
.container-end     .tabs { justify-content: flex-end;}
.container-stretch .tabs { justify-content: stretch; .tab { flex: 1 1 auto; }}
.container-between .tabs { justify-content: space-between;}
.container-around .tabs { justify-content: space-around;}
.container-evenly .tabs { justify-content: space-evenly;}

